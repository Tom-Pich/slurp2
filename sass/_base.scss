/* Mon framework CSS v2025.02.25 🖐️ linked to original ! */

$brp-l: 1200px;
$brp-m: 768px;
$brp-s: 480px;
$brp-nav: 768px;

$size-values: (½: .5em, 1: 1em, 2: 2em);  // alt + : 172 → ¼ ; 171 → ½ ; 243 → ¾ 
$dynamic-size-values: ( "½-1": var(--dynamic-space-½-1), "1-2": var(--dynamic-space-1-2), "1-5": var(--dynamic-space-1-5) , "3-5": var(--dynamic-space-3-5) );

@mixin sizes($attr, $important: false) { @each $size, $value in $size-values {
	&-#{$size} { @if $important {#{$attr}: $value !important;} @else {#{$attr}: $value;} }
}} // margin, padding and gaps
@mixin dynamic-sizes($attr, $important: false) { @each $size, $value in $dynamic-size-values {
	&-#{$size} { @if $important {#{$attr}: $value !important;} @else {#{$attr}: $value;} }
}} // margin, padding and gaps
@mixin fw-scale() { @each $step in (400, 700) { &-#{$step} {font-weight: #{$step}} }}
@mixin fs-scale() { @each $step in (300, 400, 450, 500, 600, 700, 800, 900, 1000) { &-#{$step} { font-size: var(--fs-#{$step})} }}

@mixin media($break-point: $brp-m) {@media screen and (max-width: #{$break-point}) {@content}};
@mixin media-min($break-point: $brp-m) {@media screen and ( width > #{$break-point}) {@content}};
@mixin flow { > :where(:not(:first-child)) {margin-top: var(--flow-space, 1em);} }
@mixin wrapper { width: min( 100% - 2 * var(--dynamic-space-1-2), var(--content-max-width)); margin-inline: auto; }

:root {

	color-scheme: light dark;

	// base: Humanist – accent: Rounded-Sans
	--ff-base: 'Seravek', 'Gill Sans Nova', 'Ubuntu', 'Calibri', 'DejaVu Sans', 'source-sans-pro', 'sans-serif';
	--ff-accent: 'ui-rounded', 'Hiragino Maru Gothic ProN', 'Quicksand', 'Comfortaa', 'Manjari', 'Arial Rounded MT', 'Arial Rounded MT Bold', 'Calibri', 'source-sans-pro', 'sans-serif';

	// sizing
	--content-max-width: 1200px;
	--dynamic-space-½-1: clamp(0.5rem, calc(0.19rem + 0.93vw), 1rem);
	--dynamic-space-½-2: clamp(0.5rem, calc(-0.44rem + 2.79vw), 2rem);
	--dynamic-space-1-2: clamp(1rem, calc(0.37rem + 1.86vw), 2rem);
	--dynamic-space-2-3: clamp(2rem, 1.37rem + 1.86vw, 3rem);
	--dynamic-space-1-5: clamp(1rem, calc(-1.51rem + 7.44vw), 5rem);
	--dynamic-space-3-5: clamp(3rem, calc(1.74rem + 3.72vw), 5rem);

	// colors
	--clr-primary-500: hsl(125, 71%, 23%);
	--clr-primary-900: hsl(125, 63%, 92%);

	--clr-valid: green;
	--clr-warning: orange;
	--clr-invalid: firebrick;

	--black: hsl(0 0% 0%);
	--grey-200: hsl(0 0% 20%);
	--grey-300: hsl(0 0% 30%);
	--grey-500: hsl(0 0% 50%);
	--grey-700: hsl(0 0% 70%);
	--grey-900: hsl(0 0% 90%);
	--white: hsl(0 0% 100%);

	// shadows
	--box-shadow: 0 10px 15px -3px hsla(0, 0%, 0%, 0.1), 0 4px 6px -4px hsla(0, 0%, 0%, 0.1);
	--text-shadow: 2px 2px 5px var(--grey-300) ;

	// Dynamic font size – min @ 540px, max @ 1400px
	--fs-200: .8rem;
	--fs-300: .9rem;
	--fs-400: 1rem;
	--fs-450: clamp(1.05rem, calc(1.02rem + 0.09vw), 1.1rem);
	--fs-500: clamp(1.13rem, calc(1.05rem + 0.23vw), 1.25rem);
	--fs-600: clamp(1.27rem, calc(1.08rem + 0.55vw), 1.56rem);
	--fs-700: clamp(1.42rem, calc(1.09rem + 0.98vw), 1.95rem);
	--fs-800: clamp(1.60rem, calc(1.07rem + 1.56vw), 2.44rem);
	--fs-900: clamp(1.80rem, calc(1.02rem + 2.33vw), 3.05rem);
	--fs-1000: clamp(2.38rem, calc(1.35rem + 3.02vw), 4rem);

	//--select-arrow: url("data:image/svg+xml; utf8, <svg width='24' height='24' fill='black' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'><path d='m7 10 5 5 5-5z'/></svg>");

	// mode dark
	//@media (prefers-color-scheme: dark) { }

}

// Reset
*, *::after, *::before {margin: 0; box-sizing: border-box; font-size: inherit; }
html {color-scheme: dark light;}
:has(:target){ scroll-behavior: smooth; scroll-padding-top: 10em; }
body {font-family: var(--ff-base); color: var(--grey-200); font-size: var(--fs-400); line-height: 1.5; background-color: var(--white);}
h1, h2, h3, h4, h5, h6 {font-family: var(--ff-accent); line-height: 1.1; text-wrap: balance; letter-spacing: -.02em;}
h1 {font-size: var(--fs-900);}
h2 {font-size: var(--fs-800); --flow-space: 1.5em}
h3 {font-size: var(--fs-700);}
h4 {font-size: var(--fs-600);}
h5 {font-size: var(--fs-500);}
h6 {font-size: var(--fs-450);}
p { --flow-space: .5em; text-wrap: pretty;}
a {transition: all .2s; color: var(--clr-primary-500)}
a:hover {color: var(--clr-primary-500)}
img, picture, svg, video, iframe {display: block; max-width: 100%;}
img {font-style: italic; height: auto;}
ul, ol {padding-left: 1.5em; --flow-space: .5em;}
sub, sup {line-height: 0; font-size: 0.7em;}
strong { font-weight: 700; color: var(--clr-primary-500) }
em { color: var(--clr-primary-500) }
blockquote { border-left: 1px solid var(--grey-700); padding-left: 1em; }

details {
	--marker-closed: "+";
	--marker-open: "×";
	--marker-offset-r: 0;
	--marker-padding: 1.25em;
	> summary { list-style-type: none; cursor: pointer; position: relative; padding-right: var(--marker-padding) !important;}
	> summary::-webkit-details-marker { display: none; } // Safari
	> summary { > :first-child::after, &:not(:has(:first-child))::after { content: var(--marker-closed); position: absolute; right: var(--marker-offset-r); top: var(--marker-offset-t)}}
	&[open] > summary { > :first-child::after, &:not(:has(:first-child))::after {content: var(--marker-open);}}
}

dialog {
	position: fixed; top: 50%; left: 50%; transform: translateX(-50%) translateY(-50%); width: clamp(300px, 35vw, 500px);
	border: 1px solid currentColor; padding: 2em 1em 1em 1em; z-index: 2;
	&::backdrop { backdrop-filter: blur(5px);}
	button[data-role=close-modal]:first-of-type { border: none; padding: 0; position: absolute; top: .5em; right: .75em; }
}

// Forms & buttons
button, input[type=submit], .btn {
	//--btn-clr: var(--white);
	//--text-clr: currentColor;
	//--border-clr: var(--btn-clr);
	//--btn-clr-hover: var(--text-clr);
	//--text-clr-hover: var(--btn-clr);
	//--border-clr-hover: var(--btn-clr);
	cursor: pointer; display: block; text-decoration: none; padding: .5em 1em; transition: all .2s; width: fit-content; font-family: inherit; line-height: inherit;
	background: var(--btn-clr, transparent);
	color: var(--text-clr, currentColor);
	border: 1px solid var(--border-clr, var(--btn-clr, currentColor));
	&:hover {
		background: var(--btn-clr-hover, var(--text-clr, transparent));
		color: var(--text-clr-hover, var(--btn-clr, currentColor));
		border: 1px solid var(--border-clr-hover, var(--text-clr-hover, currentColor));}
}
.btn-primary { --btn-clr: var(--clr-primary-500); --text-clr: var(--white); }
input, select, textarea { padding: .5em 1em; color: currentColor; border: 1px solid currentColor; background-color: var(--white); min-width: 0; font-family: inherit;}
:is(input:not([type=checkbox], [type=radio]), select):is(.fl-1, .fl-2, .fl-3, .fl-4) { width: 5ch; } // default width, allow {flex: x} to work
option { color: var(--grey-300); }
textarea {resize: vertical; min-height: 8em; width: 100%;}
:disabled {color: var(--grey-500);}
:focus {outline: none;}
:focus-visible {outline: .5px solid var(--black);}
:is(input:not([type=checkbox]):not([type=radio]), textarea).watched {
	&:not(:placeholder-shown):valid { outline: 1px solid var(--clr-valid) }
	&:not(:placeholder-shown):invalid { outline: 1px solid var(--clr-invalid) }
	&:focus:invalid { outline: 1px solid var(--clr-warning) }
}
input[type=number] { appearance: textfield; }
input::-webkit-outer-spin-button, input::-webkit-inner-spin-button { -webkit-appearance: none;  } // Chrome, Safari, Edge
::placeholder, ::-ms-input-placeholder { color: var(--grey-500); }

// Layout
.wrapper { @include wrapper; }
.flow { @include flow; }

.block { display: block; }
.flex {display: flex; @include media {flex-direction: column;} }
.flex-s {display: flex;}
.flex-m {display: flex; @include media($brp-s) {flex-direction: column;} }
.ai-center {align-items: center;}
.ai-start {align-items: start;}
.ai-end {align-items: end;}
.jc-center {justify-content: center;}
.jc-space-between {justify-content: space-between;}
.jc-space-around {justify-content: space-around;}
.pc-center { place-content: center; }
.fl-1 {flex: 1;}
.fl-2 {flex: 2;}
.fl-3 {flex: 3;}
.fl-4 {flex: 4;}
.fl-wrap {flex-wrap: wrap;}
.fl-column {flex-direction: column;}

.grid {display: grid;}
.col-2 {grid-template-columns: repeat(2, 1fr); @include media {grid-template-columns: 1fr;}}
.col-2-m {grid-template-columns: repeat(2, 1fr); @include media($brp-s) {grid-template-columns: 1fr;}}
.col-2-s {grid-template-columns: repeat(2, 1fr);}
.col-3 {grid-template-columns: repeat(3, 1fr); @include media {grid-template-columns: 1fr;}}
.col-4 {
	grid-template-columns: repeat(4, 1fr);
	@include media {grid-template-columns: repeat(2, 1fr);};
	@include media($brp-s) {grid-template-columns: 1fr;}
}
.col-auto-fit { grid-template-columns: repeat(auto-fit, minmax(var(--col-min-width, 100px), 1fr)) }
.col-auto-fill { grid-template-columns: repeat(auto-fill, minmax(var(--col-min-width, 100px), 1fr)) }

.gap { @include sizes(gap); @include dynamic-sizes(gap); }

.fit-cover {width: 100%; height: 100%; object-fit: cover; }
.full-width {width: 100%;}
.width-fit-content {width: fit-content;}
.relative {position: relative;}
.hidden {display: none !important;}
.overflow-hidden {overflow: hidden;}

.aspect-photo {aspect-ratio: 4/3; width: 100%;}
.aspect-square {aspect-ratio: 1/1; width: 100%;}
.aspect-video {aspect-ratio: 16/9; width: 100%;}
img:is(.aspect-photo, .aspect-square, .aspect-video) { object-fit: cover; }

.desktop {@include media {display: none !important;}} // desktop only
.desktop-tablet {@include media($brp-s) {display: none !important;}} // desktop + tablet
.tablet-phone {@include media-min {display: none !important;}} // tablet + phone
.phone {@include media-min ($brp-s) {display: none !important;}} // phone only

// Utilities
.mt-0 { margin-top: 0 !important; }
.mt { @include sizes(margin-top, true); @include dynamic-sizes(margin-top, true); }
.mx-auto {margin-inline: auto;}
.p-0 { padding: 0 !important; }
.p { @include sizes(padding, true); @include dynamic-sizes(padding, true); }
.px { @include sizes(padding-inline, true); @include dynamic-sizes(padding-inline, true); }
.py { @include sizes(padding-block, true); @include dynamic-sizes(padding-block, true); }

.ta-left {text-align: left !important;}
.ta-center {text-align: center !important;}
.ta-justify {text-align: justify !important; hyphens: auto;}
.ta-right {text-align: right !important;}
.tw-balance {text-wrap: balance;}

.ff-base { font-family: var(--ff-base);}
.ff-accent { font-family: var(--ff-accent);}

.italic {font-style: italic;}
.uppercase {text-transform: uppercase;}
.td-none { text-decoration: none;}

.fw { @include fw-scale; }
.fs { @include fs-scale; }

// color, border & shadows
.clr-black {color: var(--black);}
.clr-grey-200 {color: var(--grey-200);}
.clr-grey-500 {color: var(--grey-500);}
.clr-white {color: var(--white);}
.clr-primary-500 {color: var(--clr-primary-500);}
.clr-inherit { color: inherit; }

.bg-primary-500 {background-color: var(--clr-primary-500);}
.bg-primary-900 {background-color: var(--clr-primary-900);}
.bg-grey-900 { background-color: var(--grey-900);}
.bg-white {background-color: var(--white);}

.text-shadow {text-shadow: var(--text-shadow);}
.box-shadow {box-shadow: var(--box-shadow);}

.border {border: 1px solid currentColor;}
.border-primary-500 {border: 1px solid var(--clr-primary-500);}
.border-grey-700 {border: 1px solid var(--grey-700);}
.border-none { border: none;}

.border-radius-½ {border-radius: .5em;}
.border-radius-1 {border-radius: 1em;}
.border-radius-2 {border-radius: 2em;}

// Accessibility
.visually-hidden:not(:focus):not(:active) { clip-path: inset(50%); position: absolute; white-space: nowrap; }

// inline SVG icon – don’t forget aria-hidden="true" on the SVG
svg.inline-svg-icon { display: inline-block; height: 1em; fill: currentColor; position: relative; vertical-align: middle; bottom: var(--shift, .1em)}
ul.inline-svg-bullet {
	// inline SVG as first element of <li>
	list-style-type: none;
	li { position: relative; }
	li svg:first-of-type { display: inline-block; position: absolute; left: -1.5em; top: 0.25em; height: 1em; fill:var(--bullet-clr, currentColor); }
}